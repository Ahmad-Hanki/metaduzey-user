generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Therapy {
  id            String                @id @default(uuid())
  name          String
  egitim        String?
  imageUrl      String                @default("https://res.cloudinary.com/ddxser4ml/image/upload/txwk370nwk6kg6hxluxn.jpg") @db.VarChar(5000)
  lisans        String?
  summery       String                @db.VarChar(2000)
  terapiEgtim   String?
  uzmanAlan     String?
  yuksekLisans  String?
  Appointments  Appointment[]
  therapyPlaces TherapyPlaceTherapy[]
  therapyTypes  TherapyTypeTherapy[]
  therapyUnvans TherapyUnvanTherapy[]
}

model TherapyType {
  id        String               @id @default(uuid())
  name      String
  therapies TherapyTypeTherapy[]
}

model TherapyTypeTherapy {
  id            String      @id @default(uuid())
  therapyId     String
  therapyTypeId String
  therapy       Therapy     @relation(fields: [therapyId], references: [id], onDelete: Cascade)
  therapyType   TherapyType @relation(fields: [therapyTypeId], references: [id])

  @@index([therapyId], map: "TherapyTypeTherapy_therapyId_fkey")
  @@index([therapyTypeId], map: "TherapyTypeTherapy_therapyTypeId_fkey")
}

model TherapyPlace {
  id        String                @id @default(uuid())
  name      String
  therapies TherapyPlaceTherapy[]
}

model TherapyPlaceTherapy {
  id             String       @id @default(uuid())
  therapyId      String
  therapyPlaceId String
  therapy        Therapy      @relation(fields: [therapyId], references: [id], onDelete: Cascade)
  therapyPlace   TherapyPlace @relation(fields: [therapyPlaceId], references: [id])

  @@index([therapyId], map: "TherapyPlaceTherapy_therapyId_fkey")
  @@index([therapyPlaceId], map: "TherapyPlaceTherapy_therapyPlaceId_fkey")
}

model TherapyUnvan {
  id        String                @id @default(uuid())
  name      String
  therapies TherapyUnvanTherapy[]
}

model TherapyUnvanTherapy {
  id             String       @id @default(uuid())
  therapyId      String
  therapyUnvanId String
  therapy        Therapy      @relation(fields: [therapyId], references: [id], onDelete: Cascade)
  therapyUnvan   TherapyUnvan @relation(fields: [therapyUnvanId], references: [id])

  @@index([therapyId], map: "TherapyUnvanTherapy_therapyId_fkey")
  @@index([therapyUnvanId], map: "TherapyUnvanTherapy_therapyUnvanId_fkey")
}

model Blog {
  id             String         @id @default(uuid())
  title          String
  summery        String         @db.VarChar(10000)
  yazan          String
  imageUrl       String         @db.VarChar(5000)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  blogCategories BlogCategory[]
}

model Category {
  id             String         @id @default(uuid())
  name           String
  blogCategories BlogCategory[]
}

model BlogCategory {
  id         String   @id @default(uuid())
  blogId     String
  categoryId String
  blog       Blog     @relation(fields: [blogId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@index([blogId], map: "BlogCategory_blogId_fkey")
  @@index([categoryId], map: "BlogCategory_categoryId_fkey")
}

model Appointment {
  id            String   @id @default(uuid())
  therapyId     String
  createdAt     DateTime @default(now())
  checked       Boolean  @default(false)
  contact       String
  destek        String
  email         String
  name          String
  place         String
  service       String
  tel           String
  chosenTherapy Therapy  @relation(fields: [therapyId], references: [id])

  @@index([therapyId], map: "Appointment_therapyId_fkey")
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  phone     String
  email     String
  title     String
  message   String
  helped    Boolean  @default(false)
  CreatedAt DateTime @default(now())
}
